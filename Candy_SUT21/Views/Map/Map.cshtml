@model MapViewModel


<script>
    var map, datasource, client;

    function GetMap() {
        //var cord1lon= "57.09722"
        //var cord1lat = "12.27333"
        //var cord2lon= "59.32944"
        //var cord2lat= "18.06861"
        

        console.log("inside getmap");

        // Instantiate a map object
        var map = new atlas.Map('myMap', {
            view: 'Auto',

            //Add authentication details for connecting to Azure Maps.
            authOptions: {
                authType: 'subscriptionKey',
                subscriptionKey: 'UXsLQk9ekQxPmWrI7dNLF7xq40X0qc9vS_ZVZlzCgAM'
                }
            }
        );
    

    //Wait until the map resources are ready.
    map.events.add('ready', function () {

        //Create a data source and add it to the map.
        datasource = new atlas.source.DataSource();
        map.sources.add(datasource);

        //Add a layer for rendering the route lines and have it render under the map labels.
        map.layers.add(new atlas.layer.LineLayer(datasource, null, {
            strokeColor: '#2272B9',
            strokeWidth: 5,
            lineJoin: 'round',
            lineCap: 'round'
        }), 'labels');

        //Add a layer for rendering point data.
        map.layers.add(new atlas.layer.SymbolLayer(datasource, null, {
            iconOptions: {
                image: ['get', 'icon'],
                allowOverlap: true
            },
            textOptions: {
                textField: ['get', 'title'],
                offset: [0, 1.2]
            },
            filter: ['any', ['==', ['geometry-type'], 'Point'], ['==', ['geometry-type'], 'MultiPoint']] //Only render Point or MultiPoints in this layer.
        }));


        //Create the GeoJSON objects which represent the start and end points of the route.
        var startPoint = new atlas.data.Feature(new atlas.data.Point([parseFloat(@Model.StorageCord[1]), parseFloat(@Model.StorageCord[0])]), {
            title: "Storage",
            icon: "pin-blue"
        });

        var endPoint = new atlas.data.Feature(new atlas.data.Point([parseFloat(@Model.CustomerCord[1]), parseFloat(@Model.CustomerCord[0])]), {
            title: "Customer Adress",
            icon: "pin-round-blue"
        });

        //Add the data to the data source.
        datasource.add([startPoint, endPoint]);

        map.setCamera({
            bounds: atlas.data.BoundingBox.fromData([startPoint, endPoint]),
            padding: 80
        });

        //Use MapControlCredential to share authentication between a map control and the service module.
        var pipeline = atlas.service.MapsURL.newPipeline(new atlas.service.MapControlCredential(map));

        //Construct the RouteURL object
        var routeURL = new atlas.service.RouteURL(pipeline);

        //Start and end point input to the routeURL
        var coordinates = [[startPoint.geometry.coordinates[0], startPoint.geometry.coordinates[1]], [endPoint.geometry.coordinates[0], endPoint.geometry.coordinates[1]]];

        //Make a search route request
        routeURL.calculateRouteDirections(atlas.service.Aborter.timeout(10000), coordinates).then((directions) => {
            //Get data features from response
            var data = directions.geojson.getFeatures();
            datasource.add(data);
        });
    });
    }

</script>


    <div style="width:100vw; height:100vh" id="myMap">
        <button onclick="GetMap()"></button>
    </div>
